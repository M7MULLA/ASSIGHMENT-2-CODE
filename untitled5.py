# -*- coding: utf-8 -*-
"""Untitled5.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/14OkEvscU-OgMVJRr7QtDRo7zBuSipFcn
"""

class Artwork:
    def __init__(self, artworkID, title, artist, creationDate, historicalSignificance):
        self._artworkID = artworkID
        self._title = title
        self._artist = artist
        self._creationDate = creationDate
        self._historicalSignificance = historicalSignificance

    # ArtworkID Getter and Setter
    def get_artworkID(self):
        return self._artworkID

    def set_artworkID(self, artworkID):
        self._artworkID = artworkID

    # Title Getter and Setter
    def get_title(self):
        return self._title

    def set_title(self, title):
        self._title = title

    # Artist Getter and Setter
    def get_artist(self):
        return self._artist

    def set_artist(self, artist):
        self._artist = artist

    # CreationDate Getter and Setter
    def get_creationDate(self):
        return self._creationDate

    def set_creationDate(self, creationDate):
        self._creationDate = creationDate

    # HistoricalSignificance Getter and Setter
    def get_historicalSignificance(self):
        return self._historicalSignificance

    def set_historicalSignificance(self, historicalSignificance):
        self._historicalSignificance = historicalSignificance


class Exhibition(Artwork):
    def __init__(self, artworkID, title, artist, creationDate, historicalSignificance, startDate, endDate, specialThemes):
        super().__init__(artworkID, title, artist, creationDate, historicalSignificance)
        self._startDate = startDate
        self._endDate = endDate
        self._specialThemes = specialThemes

    # StartDate Getter and Setter
    def get_startDate(self):
        return self._startDate

    def set_startDate(self, startDate):
        self._startDate = startDate

    # EndDate Getter and Setter
    def get_endDate(self):
        return self._endDate

    def set_endDate(self, endDate):
        self._endDate = endDate

    # SpecialThemes Getter and Setter
    def get_specialThemes(self):
        return self._specialThemes

    def set_specialThemes(self, specialThemes):
        self._specialThemes = specialThemes
class Visitor:
    def __init__(self, visitorID, name, age, visitorType, email):
        self._visitorID = visitorID
        self._name = name
        self._age = age
        self._visitorType = visitorType
        self._email = email

    # VisitorID Getter and Setter
    def get_visitorID(self):
        return self._visitorID

    def set_visitorID(self, visitorID):
        self._visitorID = visitorID

    # Name Getter and Setter
    def get_name(self):
        return self._name

    def set_name(self, name):
        self._name = name

    # Age Getter and Setter
    def get_age(self):
        return self._age

    def set_age(self, age):
        self._age = age

    # VisitorType Getter and Setter
    def get_visitorType(self):
        return self._visitorType

    def set_visitorType(self, visitorType):
        self._visitorType = visitorType

    # Email Getter and Setter
    def get_email(self):
        return self._email

    def set_email(self, email):
        self._email = email


class Ticket:
    def __init__(self, ticketID, visitorID, purchaseDate, price, eventType):
        self._ticketID = ticketID
        self._visitorID = visitorID
        self._purchaseDate = purchaseDate
        self._price = price
        self._eventType = eventType

    # TicketID Getter and Setter
    def get_ticketID(self):
        return self._ticketID

    def set_ticketID(self, ticketID):
        self._ticketID = ticketID

    # VisitorID Getter and Setter
    def get_visitorID(self):
        return self._visitorID

    def set_visitorID(self, visitorID):
        self._visitorID = visitorID

    # PurchaseDate Getter and Setter
    def get_purchaseDate(self):
        return self._purchaseDate

    def set_purchaseDate(self, purchaseDate):
        self._purchaseDate = purchaseDate

    # Price Getter and Setter
    def get_price(self):
        return self._price

    def set_price(self, price):
        self._price = price

    # EventType Getter and Setter
    def get_eventType(self):
        return self._eventType

    def set_eventType(self, eventType):
        self._eventType = eventType
class MuseumLocation:
    def __init__(self, locationID, description, type, capacity, accessibilityFeatures):
        self._locationID = locationID
        self._description = description
        self._type = type
        self._capacity = capacity
        self._accessibilityFeatures = accessibilityFeatures

    # LocationID Getter and Setter
    def get_locationID(self):
        return self._locationID

    def set_locationID(self, locationID):
        self._locationID = locationID

    # Description Getter and Setter
    def get_description(self):
        return self._description

    def set_description(self, description):
        self._description = description

    # Type Getter and Setter
    def get_type(self):
        return self._type

    def set_type(self, type):
        self._type = type

    # Capacity Getter and Setter
    def get_capacity(self):
        return self._capacity

    def set_capacity(self, capacity):
        self._capacity = capacity

    # AccessibilityFeatures Getter and Setter
    def get_accessibilityFeatures(self):
        return self._accessibilityFeatures

    def set_accessibilityFeatures(self, accessibilityFeatures):
        self._accessibilityFeatures = accessibilityFeatures


class ArtCollectionManager:
    def __init__(self, managerID, name, email, phoneNumber, managedCollections):
        self._managerID = managerID
        self._name = name
        self._email = email
        self._phoneNumber = phoneNumber
        self._managedCollections = managedCollections

    # ManagerID Getter and Setter
    def get_managerID(self):
        return self._managerID

    def set_managerID(self, managerID):
        self._managerID = managerID

    # Name Getter and Setter
    def get_name(self):
        return self._name

    def set_name(self, name):
        self._name = name

    # Email Getter and Setter
    def get_email(self):
        return self._email

    def set_email(self, email):
        self._email = email

    # PhoneNumber Getter and Setter
    def get_phoneNumber(self):
        return self._phoneNumber

    def set_phoneNumber(self, phoneNumber):
        self._phoneNumber = phoneNumber

    # ManagedCollections Getter and Setter
    def get_managedCollections(self):
        return self._managedCollections

    def set_managedCollections(self, managedCollections):
        self._managedCollections = managedCollections
class SpecialEvent:
    def __init__(self, eventID, name, location, startDate, endDate, ticketPrice):
        self._eventID = eventID
        self._name = name
        self._location = location
        self._startDate = startDate
        self._endDate = endDate
        self._ticketPrice = ticketPrice

    # EventID Getter and Setter
    def get_eventID(self):
        return self._eventID

    def set_eventID(self, eventID):
        self._eventID = eventID

    # Name Getter and Setter
    def get_name(self):
        return self._name

    def set_name(self, name):
        self._name = name

    # Location Getter and Setter
    def get_location(self):
        return self._location

    def set_location(self, location):
        self._location = location

    # StartDate Getter and Setter
    def get_startDate(self):
        return self._startDate

    def set_startDate(self, startDate):
        self._startDate = startDate

    # EndDate Getter and Setter
    def get_endDate(self):
        return self._endDate

    def set_endDate(self, endDate):
        self._endDate = endDate

    # TicketPrice Getter and Setter
    def get_ticketPrice(self):
        return self._ticketPrice

    def set_ticketPrice(self, ticketPrice):
        self._ticketPrice = ticketPrice


class EventOrganizer:
    def __init__(self, organizerID, name, contactInfo, numberOfEventsOrganized, specialty):
        self._organizerID = organizerID
        self._name = name
        self._contactInfo = contactInfo
        self._numberOfEventsOrganized = numberOfEventsOrganized
        self._specialty = specialty

    # OrganizerID Getter and Setter
    def get_organizerID(self):
        return self._organizerID

    def set_organizerID(self, organizerID):
        self._organizerID = organizerID

    # Name Getter and Setter
    def get_name(self):
        return self._name

    def set_name(self, name):
        self._name = name

    # ContactInfo Getter and Setter
    def get_contactInfo(self):
        return self._contactInfo

    def set_contactInfo(self, contactInfo):
        self._contactInfo = contactInfo

    # NumberOfEventsOrganized Getter and Setter
    def get_numberOfEventsOrganized(self):
        return self._numberOfEventsOrganized

    def set_numberOfEventsOrganized(self, numberOfEventsOrganized):
        self._numberOfEventsOrganized = numberOfEventsOrganized

    # Specialty Getter and Setter
    def get_specialty(self):
        return self._specialty

    def set_specialty(self, specialty):
        self._specialty = specialty
# Assuming all class definitions are provided above in the same notebook or script

# Test Case A: The addition of new art to the museum
def test_add_new_art():
    new_art = Artwork("001", "Starry Night", "Vincent Van Gogh", "1889", "One of the most recognized pieces in Western art")
    print(f"New Art Added: {new_art.get_title()} by {new_art.get_artist()}, {new_art.get_creationDate()}")

# Test Case B: The opening of a new exhibition or event at the museum
def test_new_exhibition():
    new_exhibition = Exhibition("002", "Impressionism: The Light of Day", "Various Artists", "2024", "Showcases the impressionist movement", "2024-05-01", "2024-08-01", "Impressionism")
    print(f"New Exhibition Opened: {new_exhibition.get_title()} from {new_exhibition.get_startDate()} to {new_exhibition.get_endDate()}")

# Test Case C: The purchase of tickets by an individual or tour group for an event
def test_purchase_ticket():
    visitor = Visitor("V100", "Andrew leonce", 38, "Adult", "andrew_leonce@gmail.com")
    ticket_for_exhibition = Ticket("T100", visitor.get_visitorID(), "2024-07-01", 25.00, "Exhibition")
    print(f"Ticket Purchased by {visitor.get_name()} for {ticket_for_exhibition.get_eventType()} on {ticket_for_exhibition.get_purchaseDate()}")

# Test Case D: The display of payment receipts for purchasing (one or more) tickets
def test_payment_receipt():
    visitor = Visitor("V101", "Mohammed Almulla", 21, "Adult", "mohd.almulla@hotmail.com")
    tickets = [
        Ticket("T101", visitor.get_visitorID(), "2024-08-01", 15.00, "SpecialEvent"),
        Ticket("T102", visitor.get_visitorID(), "2024-08-02", 25.00, "Exhibition")
    ]
    total_cost = sum(ticket.get_price() for ticket in tickets)
    print(f"Payment Receipt for {visitor.get_name()}:")
    for ticket in tickets:
        print(f"  - {ticket.get_eventType()} on {ticket.get_purchaseDate()} at ${ticket.get_price()}")
    print(f"Total Cost: ${total_cost}")

# Run the test cases
test_add_new_art()
test_new_exhibition()
test_purchase_ticket()
test_payment_receipt()